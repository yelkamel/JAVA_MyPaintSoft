<?xml version="1.0" encoding="UTF-8"?>
<project name="myPhotoShop" default="execute" basedir=".">
  <!--================================================-->
  <!--             The project description            -->
  <!--================================================-->
  <description>
    Ant Makefile for ${ant.project.name}
  </description>

  <!--================================================-->
  <!--             Some variable definition           -->
  <!--================================================-->
  <property environment="env" />
  <property file="build.properties" />
  <property name="src" value="${basedir}/src" />
  <property name="bin" value="${basedir}/bin" />
  <property name="build" value="${basedir}/build" />
  <property name="plugin" value="${basedir}/plugin" />
  <property name="lib" value="${basedir}/lib" />
  <property name="doc" value="${basedir}/doc" />
  <property name="asset" value="${basedir}/asset" />
  <property name="binary" value="${basedir}/${proj}.jar" />
  <property name="proj_fullname" value="${login}-${proj}" />
  <property name="tarball" value="${basedir}/${proj_fullname}.${extension}" />
  <property name="PluginSource" value="PluginSource" />
  <property name="PluginBuild" value="${PluginSource}/build" />
  <property name="BasicPlugin" value="BasicPlugin.jar" />
  <property name="BonusPlugin" value="BonusPlugin.jar" />
  <property name="tests" value="${basedir}/tests" />
  <property name="classpath" value="${basedir}/.classpath" />
  <property name="junit-path" value="${basedir}/lib" />

  <!--================================================-->
  <!--                    Condition                   -->
  <!--================================================-->
  <available file="${basedir}/AUTHORS" property="authors.exists" />
  <available file="${basedir}/TODO" property="todo.exists" />
  <available file="${basedir}/README" property="readme.exists" />
  <condition property="isUnix">
    <and>
	<os family="unix" />
	<not>
	  <os family="mac" />
	</not>
    </and>
  </condition>
  <condition property="isWin">
    <os family="windows" />
  </condition>
  <condition property="isMac">
    <os family="mac" />
  </condition>

  <!--================================================-->
  <!--           Custom classpath definition          -->
  <!--================================================-->
  <path id="custom.classpath">
    <fileset dir="${lib}">
	<include name="*.jar" />
    </fileset>
    <pathelement location="${src}" />
    <pathelement location="${build}" />
    <pathelement location="${java.class.path}" />
  </path>

  <!--================================================-->
  <!--                 Custom properties              -->
  <!--================================================-->
  <target name="initMac" description="Initialize Mac system" if="isMac">
    <property name="shell" value="sh" />
    <property name="exec-option" value="-c" />
    <!--	<property name="argNeededForMAC" value="-XstartOnFirstThread" /> -->
    <property name="jar" value="jar" />
  </target>
  <target name="initWindows" description="Initialize Windows system" if="isWin">
    <property name="shell" value="cmd.exe" />
    <property name="exec-option" value="/c" />
    <property name="argNeededForMAC" value="" />
    <property name="jar" value="jar" />
  </target>
  <target name="initUnix" description="Initialize Unix system" if="isUnix">
    <property name="shell" value="sh" />
    <property name="exec-option" value="-c" />
    <property name="jar" value="jar" />
    <property name="argNeededForMAC" value="" />
  </target>
  <target name="checkAUTHORS" description="Check if AUTHORS is present" unless="authors.exists">
    <fail message="You must have an AUTHORS file !" />
  </target>
  <target name="checkTODO" description="Check if TODO is present" unless="todo.exists">
    <fail message="You must have a TODO file !" />
  </target>
  <target name="checkREADME" description="Check if README is present" unless="readme.exists">
    <fail message="You must have a README file !" />
  </target>

  <!--================================================-->
  <!--    Initialization: create needed directories   -->
  <!--================================================-->
  <target name="init" depends="clean, initMac, initWindows, initUnix" description="Construct needed directories">
    <echo message="=== Initialization ===" />
    <mkdir dir="${build}" />
    <mkdir dir="${doc}" />
    <mkdir dir="${asset}" />
    <mkdir dir="${lib}" />
    <mkdir dir="${plugin}" />
    <mkdir dir="${PluginBuild}" />
    <mkdir dir="${tests}" />
    <echo file="${basedir}/AUTHORS" append="false" message="* ${login}${line.separator}" />
    <echo message="Successfully created all needed directories !" />
  </target>

  <!--================================================-->
  <!--              Compile our project               -->
  <!--================================================-->
  <target name="compile" depends="init" description="Compile sources">
    <echo message="=== Compilation of ${src} ===" />
    <javac srcdir="${src}" destdir="${build}" debug="on" deprecation="on" optimize="off" fork="yes" verbose="yes">
	<classpath>
	  <path refid="custom.classpath" />
	</classpath>
	<include name="${main.class}.java" />
	<include name="**/*.java" />
    </javac>
    <echo message="Successfully compiled in ${build} !" />
  </target>

  <!--================================================-->
  <!--               Create the jarfile               -->
  <!--================================================-->
  <target name="jar" depends="compile" description="Create the tarball">
    <delete file="${binary}" />
    <echo message="=== Creating the jar file ===" />
    <jar jarfile="${binary}" basedir="${build}">
	<fileset dir="${build}" includes="*/**" />

	<manifest>
	  <attribute name="Main-Class" value="${main.class}" />
	  <attribute name="Built-By" value="${login}" />
	  <attribute name="Specification-Title" value="${proj}" />
	</manifest>
    </jar>
    <echo message="Successfully created the ${binary} jarfile !" />
  </target>

  <!--================================================-->
  <!--              Execute the project               -->
  <!--================================================-->
  <target name="execute" depends="jar,plugin" description="Execute the project">
    <echo message="=== Execution ===" />
    <java jar="${binary}" fork="true">

    </java>
    <echo message="Execution terminated !" />
  </target>

  <!--================================================-->
  <!--          Compile file for the plugins          -->
  <!--================================================-->
  <target name="compileplugin" depends="init" description="Compile file for the plugins">
    <javac srcdir="${PluginSource}" destdir="${PluginBuild}" debug="on" deprecation="on" optimize="off" fork="yes">
	<classpath>
	  <path refid="custom.classpath" />
	</classpath>
    </javac>
  </target>

  <!--================================================-->
  <!--              Create the basic plugin           -->
  <!--================================================-->
  <target name="pluginBasic" depends="compileplugin" description="Create the basic plugin">
    <delete file="${plugin}/${BasicPlugin}" />
    <echo message="=== Creating the basic plugin ===" />
    <exec dir="${PluginBuild}" executable="${shell}">
	<arg line="${exec-option} '${jar} cvf ../../plugin/${BasicPlugin} plugin/basic'" />
    </exec>
    <echo message="Successfully created the ${BasicPlugin} plugin jarfile !" />
  </target>

  <!--================================================-->
  <!--             Create the bonus plugin            -->
  <!--================================================-->
  <target name="pluginBonus" depends="compileplugin" description="Create the bonus plugin">
    <delete file="${plugin}/${BonusPlugin}" />
    <echo message="=== Creating the bonus plugin ===" />
    <exec dir="${PluginBuild}" executable="${shell}">
	<arg line="${exec-option} '${jar} cvf ../../plugin/${BonusPlugin} plugin/bonus'" />
    </exec>
    <echo message="Successfully created the ${BonusPlugin} plugin jarfile !" />
  </target>

  <!--================================================-->
  <!--              Create all the plugins            -->
  <!--================================================-->
  <target name="plugin" depends="pluginBasic, pluginBonus" description="Create all the plugins">
  </target>

  <!--================================================-->
  <!--              Clean the main folder             -->
  <!--================================================-->
  <target name="cleanMain" description="Clean the main directory">
    <echo message="=== Cleaning main directory ===" />
    <delete dir="${build}" failonerror="false" />
    <echo message="Main directory successfully cleaned !" />
  </target>

  <!--================================================-->
  <!--             Clean the plugin folder            -->
  <!--================================================-->
  <target name="cleanPlugin" description="Clean the plugin directory">
    <echo message="=== Cleaning plugin directory ===" />
    <delete dir="${PluginBuild}" failonerror="false" />
    <echo message="Plugin directory successfully cleaned !" />
  </target>

  <!--================================================-->
  <!--               Clean the project                -->
  <!--================================================-->
  <target name="clean" depends="cleanMain, cleanPlugin" description="Clean all generated directory">
    <echo message="=== Cleaning project ===" />
    <delete>
	<fileset dir="${basedir}" includes="**/*~" />
	<fileset dir="${basedir}" includes="**/*.class" />
	<fileset dir="${basedir}" includes="**/*.tmp" />
	<fileset dir="${basedir}" includes="**/*.log" />
    </delete>
    <echo message="Project successfully cleaned !" />
  </target>

  <!--================================================-->
  <!--      Clean the project and delete executable   -->
  <!--================================================-->
  <target name="distclean" depends="clean" description="Clean binary and directory">
    <echo message="=== Distcleaning project ===" />
    <delete file="${binary}" failonerror="false" />
    <delete file="${plugin}/${BasicPlugin}" failonerror="false" />
    <delete file="${plugin}/${BonusPlugin}" failonerror="false" />
    <delete dir="${doc}" failonerror="false" />
    <delete dir="${tests}" failonerror="false" />
    <delete dir="${bin}" failonerror="false" />
    <delete dir="${build}" failonerror="false" />
    <delete dir="${plugin}" failonerror="false" />

    <delete>
	<fileset dir="${basedir}" includes="**/*.tar" />
	<fileset dir="${basedir}" includes="**/*.gz" />
	<fileset dir="${basedir}" includes="**/*.tgz" />
	<fileset dir="${basedir}" includes="**/*.bz2" />
	<fileset dir="${basedir}" includes="**/*.zip" />
	<fileset dir="${basedir}" includes="**/*.rar" />
    </delete>
    <echo message="Project successfully distcleaned !" />
  </target>

  <!--================================================-->
  <!--      Generate the JavaDoc documentation        -->
  <!--================================================-->
  <target name="doc" description="Generate documentation">
    <echo message="=== Creating javadoc documentation ===" />
    <javadoc sourcepath="${src}" destdir="${doc}">
	<fileset dir="${src}" defaultexcludes="yes">
	  <include name="**" />
	</fileset>
    </javadoc>
    <echo message="Javadoc documentation created in ${doc} !" />
  </target>

  <!--================================================-->
  <!--                Create the tarball              -->
  <!--================================================-->
  <target name="dist" depends="distclean" description="Create the tarball">
    <tar longfile="gnu" destfile="${tarball}" compression="${compression.mode}">
	<tarfileset dir="${basedir}" mode="700" username="${login}" prefix="${proj_fullname}/">
	  <include name="**/*" />
	  <exclude name=".*" />
	  <exclude name="**/.svn" />
	  <exclude name="**/*.gz" />
	  <exclude name="**/*.bz2" />
	  <exclude name="**/*.tgz" />
	  <exclude name="**/*.tar" />
	  <exclude name="**/*.zip" />
	  <exclude name="**/*.rar" />
	</tarfileset>
    </tar>
  </target>

  <!--================================================-->
  <!--        Create the tarball (alias of dist)      -->
  <!--================================================-->
  <target name="tar" depends="dist" description="Create the tarball">
  </target>

  <!--================================================-->
  <!--        Custom classpath definition    -->
  <!--================================================-->
  <!-- junit-path = /u/prof/yaka/public/junit-4.4.jar -->

  <path id="custom.classpath">
    <fileset dir="${junit-path}">
	<include name="*.jar" />
    </fileset>
    <pathelement location="${src}" />
    <pathelement location="${junit-path}" />
    <pathelement location="${build}" />
    <pathelement location="${java.class.path}" />
  </path>


  <!--================================================-->
  <!--          Launch Junit test         -->
  <!--================================================-->
  <target name="check" depends="compile, compile-test" description="Launch Junit test">
    <junit printsummary="yes" haltonfailure="no">
	<formatter type="xml" />
	<classpath refid="custom.classpath" />
	<batchtest fork="yes" todir="${tests}">
	  <fileset dir="${build}">
	    <include name="**/*Test.class" />
	    <exclude name="**/AllTests.class" />
	  </fileset>
	</batchtest>
    </junit>
    <junitreport>
	<fileset dir="${tests}">
	  <include name="TEST-*.xml" />
	</fileset>
	<report format="frames" todir="${tests}" />
	<!-- <report format="noframes" styledir="xslt"/> -->
    </junitreport>
  </target>

  <!--================================================-->
  <!--          Create dir check and compile tests    -->
  <!--================================================-->
  <target name="compile-test">
    <mkdir dir="classes.dir" />
    <javac srcdir="${tests}" destdir="classes.dir" />
  </target>



</project>
